stages:
  - .pre
  - build
  - deploy


variables:
  JUMP_HOST: 117.50.192.6
  PROD_HOST: 10.60.90.226
  PROD_DEVOPS_DIR: "/home/ubuntu/devops/aidicloud/deploy/docker"
  PROD_CONF: "confs/apps/prod.conf.yaml"

  TEST_HOST1: 192.168.0.161
  AIDICLOUD_DEV_HOST: 192.168.0.165
  JOB_STATUS: "成功"
  IMAGE: ""

cache: &global_cache
  key: $CI_COMMIT_REF_SLUG
  paths:
    - $CI_PROJECT_DIR/node_modules
    - $CI_PROJECT_DIR/dist
  policy: pull-push

pre-dev:
  tags:
    - cloud
  stage: .pre
  image: node:18.15.0
  cache:
    <<: *global_cache
  script:
    - npm install pnpm -g --registry=http://cicd.aqrose.com/nexus/repository/npm/
    - pnpm install --no-frozen-lockfile
  retry:
    max: 2
    when: always
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^main/'
    - if: '$CI_COMMIT_REF_NAME =~ /^hotfix/'
    - if: '$CI_COMMIT_TAG'
    - if: '$CI_COMMIT_REF_NAME =~ /^feat/'
    - if: '$CI_COMMIT_REF_NAME =~ /^release/'


build:
  tags:
    - cloud
  stage: build
  variables:
    VERSION: "v1.0"
  needs:
    - job: pre-dev
  before_script:
    - apk add curl
  script:
    - echo "VERSION=${VERSION#*v}" > variables.env
    - IMAGE=$DOCKER_REGISTRY/aidi_cloud/aidicloud-web-admin-api-svc:${VERSION#*v}
    - echo "IMAGE=$IMAGE" >> variables.env
    - chmod 777 ./gitlab-ci.sh
    - sh ./gitlab-ci.sh build $IMAGE $CI_NS_BUILD_DT_WH_URL
  retry:
    max: 2
    when: always
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^main/'
      variables:
        VERSION: "v$CI_PIPELINE_IID-main"
    - if: '$CI_COMMIT_REF_NAME =~ /^hotfix/'
      variables:
        VERSION: "v$CI_PIPELINE_IID-hotfix"
    - if: '$CI_COMMIT_REF_NAME =~ /^release/'
      variables:
        VERSION: "v$CI_PIPELINE_IID-release"
    - if: '$CI_COMMIT_TAG'
      variables:
        VERSION: "$CI_COMMIT_TAG-stable"
  artifacts:
    reports:
      dotenv: variables.env

deploy-dev:
  tags:
    - cloud
  stage: deploy
  needs:
    - job: build
  before_script:
    #    - result=$(echo "$TEST_USERS" |grep "$GITLAB_USER_NAME")
    #    - if [[ "$result" != "" ]]; then echo "permission is allowed"; else echo "permission is not allowed"; exit 0; fi
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $AIDICLOUD_DEV_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh -Tq aidicloud@$AIDICLOUD_DEV_HOST <<EOF
    - cd /home/aidicloud/devops/aidicloud/deploy/docker
    - 'sed -ri "s/aidicloudwebadminapiversion.*/aidicloudwebadminapiversion: $VERSION/g" confs/apps/dev.conf.yaml'
    - ./deploy.sh -c confs/apps/dev.conf.yaml aidicloud
    - EOF
  retry:
    max: 2
    when: always
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^main/'
      when: manual
    - if: '$CI_COMMIT_REF_NAME =~ /^hotfix/'
      when: manual
    - if: '$CI_COMMIT_REF_NAME =~ /^release/'
      when: manual
    - if: '$CI_COMMIT_TAG'
      when: manual

deploy-test:
  tags:
    - cloud
  stage: deploy
  variables:
    JOB_STATUS: "成功"
    DEPLOY_ENV: "系统集成测试环境"
  needs:
    - job: build
  before_script:
    #    - result=$(echo "$TEST_USERS" |grep "$GITLAB_USER_NAME")
    #    - if [[ "$result" != "" ]]; then echo "permission is allowed"; else echo "permission is not allowed"; exit 0; fi
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $TEST_HOST1 >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh -Tq cloud@$TEST_HOST1 <<EOF
    - cd /home/cloud/aidicloud/devops/aidicloud/deploy/docker
    - 'sed -ri "s/aidicloudwebadminapiversion.*/aidicloudwebadminapiversion: $VERSION/g" confs/apps/test.conf.yaml'
    - ./deploy.sh -c confs/apps/test.conf.yaml aidicloud || JOB_STATUS="失败"
    - 'curl POST "$CI_NS_DEPLOY_DT_WH_URL" -H "Content-Type: application/json" -d "{\"msgtype\": \"markdown\", \"markdown\": {\"title\": \"GitLab CI/CD\", \"text\": \"#### GitLab CI/CD \n - 项目: NexSight \n - 服务: ${CI_PROJECT_NAME} \n - 构建分支: ${CI_COMMIT_REF_NAME} \n - stage: ${CI_JOB_STAGE} \n - job: ${CI_JOB_NAME} \n - 修改内容: ${CI_COMMIT_MESSAGE} \n - image: ${IMAGE} \n - 构建状态: ${JOB_STATUS} \n - 部署环境: ${DEPLOY_ENV} \n - 部署时间：$(TZ=UTC-8 date "+%Y-%m-%d %H:%M:%S") \n - 提交者: ${GITLAB_USER_NAME} \n\n\n [流水线: ${CI_PIPELINE_ID}](${CI_PROJECT_URL}/pipelines/${CI_PIPELINE_ID}) \n\"}, \"at\": {\"isAtAll\": true}}"'
    - EOF
  retry:
    max: 2
    when: always
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^main/'
      when: manual
    - if: '$CI_COMMIT_REF_NAME =~ /^hotfix/'
      when: manual
    - if: '$CI_COMMIT_REF_NAME =~ /^release/'
      when: manual
    - if: '$CI_COMMIT_TAG'
      when: manual

deploy-prod:
  stage: deploy
  variables:
    JOB_STATUS: "成功"
    DEPLOY_ENV: "生产环境"
  needs:
    - job: build
  before_script:
    - result=$(echo "$USERS" |grep "$GITLAB_USER_NAME")
    - if [[ "$result" != "" ]]; then echo "permission is allowed"; else echo "permission is not allowed"; exit 0; fi
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $JUMP_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh -Tq ubuntu@$JUMP_HOST <<EOF
    - ssh -Tq ubuntu@$PROD_HOST
    - cd $PROD_DEVOPS_DIR
    - 'sed -ri "s/aidicloudwebadminapiversion.*/aidicloudwebadminapiversion: $VERSION/g" $PROD_CONF'
    - ./deploy.sh -c $PROD_CONF aidicloud || JOB_STATUS="失败"
    - 'curl POST "$CI_NS_DEPLOY_DT_WH_URL" -H "Content-Type: application/json" -d "{\"msgtype\": \"markdown\", \"markdown\": {\"title\": \"GitLab CI/CD\", \"text\": \"#### GitLab CI/CD \n - 项目: NexSight \n - 服务: ${CI_PROJECT_NAME} \n - 构建分支: ${CI_COMMIT_REF_NAME} \n - stage: ${CI_JOB_STAGE} \n - job: ${CI_JOB_NAME} \n - 修改内容: ${CI_COMMIT_MESSAGE} \n - tag: ${CI_COMMIT_TAG} \n - tag备注: ${CI_COMMIT_TAG_MESSAGE} \n - image: ${IMAGE} \n - 构建状态: ${JOB_STATUS} \n - 部署环境: ${DEPLOY_ENV} \n - 部署时间：$(TZ=UTC-8 date "+%Y-%m-%d %H:%M:%S") \n - 提交者: ${GITLAB_USER_NAME} \n\n\n [流水线: ${CI_PIPELINE_ID}](${CI_PROJECT_URL}/pipelines/${CI_PIPELINE_ID}) \n\"}, \"at\": {\"isAtAll\": true}}"'
    - EOF
  retry:
    max: 2
    when: always
  rules:
    - if: '$CI_COMMIT_TAG'
      when: manual